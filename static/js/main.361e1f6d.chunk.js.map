{"version":3,"sources":["components/Image/Image.js","components/ImageList/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","id","react_default","a","createElement","alt","src","concat","ImageList","pictures","lastIndex","picturesAmount","Fragment","slice","map","Image_Image","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadNextPicture","setState","state","ids","_this2","fetch","then","response","json","data","pic","url","split","className","ImageList_ImageList","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAOeA,MALf,SAAeC,GAAO,IACZC,EAAOD,EAAPC,GACR,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAI,GAAGC,IAAG,8BAAAC,OAAgCN,MCUzCO,MAXf,SAAmBR,GAAO,IAChBS,EAAwCT,EAAxCS,SAAUC,EAA8BV,EAA9BU,UAAWC,EAAmBX,EAAnBW,eAC7B,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAS,SAAA,KACGH,EAASI,MAAMH,EAAWA,EAAYC,GAAgBG,IAAI,SAAAb,GAAE,OAC3DC,EAAAC,EAAAC,cAACW,EAAD,CAAOC,IAAKf,EAAIA,GAAIA,QCHtBU,EAAiB,EA2CRM,cAxCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAmBFI,gBAAkB,WAChBP,EAAKQ,SAAS,CAAEhB,UAAWQ,EAAKS,MAAMjB,UAAYC,KAnBlDO,EAAKS,MAAQ,CACXlB,SAAU,GACVmB,IAAK,GACLlB,UAAW,GALDQ,mFASM,IAAAW,EAAAR,KAClBS,MAAM,iCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OACRL,EAAKH,SAAS,CACZjB,SAAUyB,EACVN,IAAKM,EAAKpB,IAAI,SAAAqB,GAAG,OAAIA,EAAIC,IAAIC,MAAR,WAAyB,GAAGA,MAA5B,KAAuC,0CAUlE,OACEnC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKkC,UAAU,kBACbpC,EAAAC,EAAAC,cAACmC,EAAD,CACE9B,SAAUY,KAAKM,MAAMC,IACrBlB,UAAWW,KAAKM,MAAMjB,UACtBC,eAAgBA,KAGpBT,EAAAC,EAAAC,cAAA,UAAQoC,QAASnB,KAAKI,iBAAtB,kBAnCUgB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.361e1f6d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Image(props) {\n  const { id } = props;\n  return <img alt=\"\" src={`http://source.unsplash.com/${id}`} />;\n}\n\nexport default Image;\n","import React from \"react\";\nimport Image from \"../Image/Image\";\n\nfunction ImageList(props) {\n  const { pictures, lastIndex, picturesAmount } = props;\n  return (\n    <>\n      {pictures.slice(lastIndex, lastIndex + picturesAmount).map(id => (\n        <Image key={id} id={id} />\n      ))}\n    </>\n  );\n}\n\nexport default ImageList;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Image from \"./components/Image/Image\";\nimport ImageList from \"./components/ImageList/ImageList\";\n\nconst picturesAmount = 3;\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      pictures: [],\n      ids: [],\n      lastIndex: 0\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://picsum.photos/v2/list\")\n      .then(response => response.json())\n      .then(data =>\n        this.setState({\n          pictures: data,\n          ids: data.map(pic => pic.url.split(`photos/`)[1].split(`\"`)[0])\n        })\n      );\n  }\n\n  loadNextPicture = () => {\n    this.setState({ lastIndex: this.state.lastIndex + picturesAmount });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"flex-container\">\n          <ImageList\n            pictures={this.state.ids}\n            lastIndex={this.state.lastIndex}\n            picturesAmount={picturesAmount}\n          />\n        </div>\n        <button onClick={this.loadNextPicture}> Next </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}